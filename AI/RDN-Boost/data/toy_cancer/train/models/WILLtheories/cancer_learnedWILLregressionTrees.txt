useStdLogicNotation: true.

% maxTreeDepthInNodes                 = 2
% maxTreeDepthInLiterals              = 3
% maxNumberOfLiteralsAtAnInteriorNode = 2
% maxFreeBridgersInBody               = 0
% maxNumberOfClauses                  = 8
% maxNodesToConsider                  = 1000
% maxNodesToCreate                    = 10000
% maxAcceptableNodeScoreToStop        = 0.003
% negPosRatio                         = 2.000
% testNegPosRatio                     = 2.000



%%%%%  WILL-Produced Tree #1 @ 11:11:09 8/4/10.  [Using 1,097,176 memory cells.]  %%%%%

% FOR cancer(a):
%   if ( smokes(a) )
%   then return 0.8581489350995121;  // std dev = 1.83e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( num_of_smoking_friends(a, 2) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */


% Clauses:

smokes(a) ^
   ! => 
   cancer(a, 0.8581489350995121). // Clause #1.

num_of_smoking_friends(a, 2) ^
   ! => 
   cancer(a, 0.8581489350995122). // Clause #2.

! => 
   cancer(_, -0.1418510649004878). // Clause #3.


% The flattened versions of these clauses:

flattened_smokes(A) ^
   ! => 
   cancer(A, 0.8581489350995121). // Flattened version of clause #1.

flattened_num_of_smoking_friends(A, 2) ^
   ! => 
   cancer(A, 0.8581489350995122). // Flattened version of clause #2.

flattened_! => 
   cancer(Underscore, -0.1418510649004878). // Flattened version of clause #3.


% The unique flattened literals:
%   num_of_smoking_friends(A, 2)
%   smokes(A)

%%%%%  WILL-Produced Tree #2 @ 11:11:09 8/4/10.  [Using 1,117,800 memory cells.]  %%%%%

% FOR cancer(a):
%   return 0.43783406196450586;  // std dev = 0.398, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */


% Clauses:

! => 
   cancer(_, 0.43783406196450586). // Clause #1.


% The flattened versions of these clauses:

flattened_! => 
   cancer(Underscore, 0.43783406196450586). // Flattened version of clause #1.


% The unique flattened literals:

%%%%%  WILL-Produced Tree #3 @ 11:11:09 8/4/10.  [Using 1,137,576 memory cells.]  %%%%%

% FOR cancer(a):
%   return 0.3549928621916349;  // std dev = 0.380, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */


% Clauses:

! => 
   cancer(_, 0.3549928621916349). // Clause #1.


% The flattened versions of these clauses:

flattened_! => 
   cancer(Underscore, 0.3549928621916349). // Flattened version of clause #1.


% The unique flattened literals:

%%%%%  WILL-Produced Tree #4 @ 11:11:09 8/4/10.  [Using 1,074,752 memory cells.]  %%%%%

% FOR cancer(a):
%   return 0.2779023682844599;  // std dev = 0.367, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */


% Clauses:

! => 
   cancer(_, 0.2779023682844599). // Clause #1.


% The flattened versions of these clauses:

flattened_! => 
   cancer(Underscore, 0.2779023682844599). // Flattened version of clause #1.


% The unique flattened literals:

%%%%%  WILL-Produced Tree #5 @ 11:11:09 8/4/10.  [Using 1,094,528 memory cells.]  %%%%%

% FOR cancer(a):
%   return 0.21354299751196804;  // std dev = 0.360, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */


% Clauses:

! => 
   cancer(_, 0.21354299751196804). // Clause #1.


% The flattened versions of these clauses:

flattened_! => 
   cancer(Underscore, 0.21354299751196804). // Flattened version of clause #1.


% The unique flattened literals:

%%%%%  WILL-Produced Tree #6 @ 11:11:10 8/4/10.  [Using 1,113,712 memory cells.]  %%%%%

% FOR cancer(a):
%   return 0.16305306323132399;  // std dev = 0.357, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */


% Clauses:

! => 
   cancer(_, 0.16305306323132399). // Clause #1.


% The flattened versions of these clauses:

flattened_! => 
   cancer(Underscore, 0.16305306323132399). // Flattened version of clause #1.


% The unique flattened literals:

%%%%%  WILL-Produced Tree #7 @ 11:11:10 8/4/10.  [Using 1,133,488 memory cells.]  %%%%%

% FOR cancer(a):
%   return 0.12456070163979827;  // std dev = 0.356, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */


% Clauses:

! => 
   cancer(_, 0.12456070163979827). // Clause #1.


% The flattened versions of these clauses:

flattened_! => 
   cancer(Underscore, 0.12456070163979827). // Flattened version of clause #1.


% The unique flattened literals:

%%%%%  WILL-Produced Tree #8 @ 11:11:10 8/4/10.  [Using 1,080,112 memory cells.]  %%%%%

% FOR cancer(a):
%   return 0.09548524386272243;  // std dev = 0.356, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */


% Clauses:

! => 
   cancer(_, 0.09548524386272243). // Clause #1.


% The flattened versions of these clauses:

flattened_! => 
   cancer(Underscore, 0.09548524386272243). // Flattened version of clause #1.


% The unique flattened literals:

%%%%%  WILL-Produced Tree #9 @ 11:11:10 8/4/10.  [Using 1,100,112 memory cells.]  %%%%%

% FOR cancer(a):
%   return 0.07351648295120634;  // std dev = 0.357, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */


% Clauses:

! => 
   cancer(_, 0.07351648295120634). // Clause #1.


% The flattened versions of these clauses:

flattened_! => 
   cancer(Underscore, 0.07351648295120634). // Flattened version of clause #1.


% The unique flattened literals:

%%%%%  WILL-Produced Tree #10 @ 11:11:10 8/4/10.  [Using 1,119,888 memory cells.]  %%%%%

% FOR cancer(a):
%   return 0.056845212941458424;  // std dev = 0.358, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */


% Clauses:

! => 
   cancer(_, 0.056845212941458424). // Clause #1.


% The flattened versions of these clauses:

flattened_! => 
   cancer(Underscore, 0.056845212941458424). // Flattened version of clause #1.


% The unique flattened literals:

%%%%%  WILL-Produced Tree #11 @ 11:11:10 8/4/10.  [Using 1,141,464 memory cells.]  %%%%%

% FOR cancer(a):
%   return 0.044122725894919564;  // std dev = 0.359, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */


% Clauses:

! => 
   cancer(_, 0.044122725894919564). // Clause #1.


% The flattened versions of these clauses:

flattened_! => 
   cancer(Underscore, 0.044122725894919564). // Flattened version of clause #1.


% The unique flattened literals:

%%%%%  WILL-Produced Tree #12 @ 11:11:10 8/4/10.  [Using 1,084,880 memory cells.]  %%%%%

% FOR cancer(a):
%   return 0.03435903593287178;  // std dev = 0.360, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */


% Clauses:

! => 
   cancer(_, 0.03435903593287178). // Clause #1.


% The flattened versions of these clauses:

flattened_! => 
   cancer(Underscore, 0.03435903593287178). // Flattened version of clause #1.


% The unique flattened literals:

%%%%%  WILL-Produced Tree #13 @ 11:11:10 8/4/10.  [Using 1,104,776 memory cells.]  %%%%%

% FOR cancer(a):
%   return 0.026827899750489492;  // std dev = 0.361, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */


% Clauses:

! => 
   cancer(_, 0.026827899750489492). // Clause #1.


% The flattened versions of these clauses:

flattened_! => 
   cancer(Underscore, 0.026827899750489492). // Flattened version of clause #1.


% The unique flattened literals:

%%%%%  WILL-Produced Tree #14 @ 11:11:10 8/4/10.  [Using 1,124,408 memory cells.]  %%%%%

% FOR cancer(a):
%   return 0.020993416157253513;  // std dev = 0.362, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */


% Clauses:

! => 
   cancer(_, 0.020993416157253513). // Clause #1.


% The flattened versions of these clauses:

flattened_! => 
   cancer(Underscore, 0.020993416157253513). // Flattened version of clause #1.


% The unique flattened literals:

%%%%%  WILL-Produced Tree #15 @ 11:11:10 8/4/10.  [Using 1,144,184 memory cells.]  %%%%%

% FOR cancer(a):
%   return 0.01645684054404691;  // std dev = 0.362, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */


% Clauses:

! => 
   cancer(_, 0.01645684054404691). // Clause #1.


% The flattened versions of these clauses:

flattened_! => 
   cancer(Underscore, 0.01645684054404691). // Flattened version of clause #1.


% The unique flattened literals:

%%%%%  WILL-Produced Tree #16 @ 11:11:10 8/4/10.  [Using 1,089,280 memory cells.]  %%%%%

% FOR cancer(a):
%   return 0.01291886868666318;  // std dev = 0.362, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */


% Clauses:

! => 
   cancer(_, 0.01291886868666318). // Clause #1.


% The flattened versions of these clauses:

flattened_! => 
   cancer(Underscore, 0.01291886868666318). // Flattened version of clause #1.


% The unique flattened literals:

%%%%%  WILL-Produced Tree #17 @ 11:11:10 8/4/10.  [Using 1,109,056 memory cells.]  %%%%%

% FOR cancer(a):
%   return 0.010152969077605803;  // std dev = 0.363, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */


% Clauses:

! => 
   cancer(_, 0.010152969077605803). // Clause #1.


% The flattened versions of these clauses:

flattened_! => 
   cancer(Underscore, 0.010152969077605803). // Flattened version of clause #1.


% The unique flattened literals:

%%%%%  WILL-Produced Tree #18 @ 11:11:10 8/4/10.  [Using 1,128,632 memory cells.]  %%%%%

% FOR cancer(a):
%   return 0.00798641712762893;  // std dev = 0.363, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */


% Clauses:

! => 
   cancer(_, 0.00798641712762893). // Clause #1.


% The flattened versions of these clauses:

flattened_! => 
   cancer(Underscore, 0.00798641712762893). // Flattened version of clause #1.


% The unique flattened literals:

%%%%%  WILL-Produced Tree #19 @ 11:11:10 8/4/10.  [Using 1,148,728 memory cells.]  %%%%%

% FOR cancer(a):
%   return 0.006286673089573795;  // std dev = 0.363, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */


% Clauses:

! => 
   cancer(_, 0.006286673089573795). // Clause #1.


% The flattened versions of these clauses:

flattened_! => 
   cancer(Underscore, 0.006286673089573795). // Flattened version of clause #1.


% The unique flattened literals:

%%%%%  WILL-Produced Tree #20 @ 11:11:10 8/4/10.  [Using 1,094,016 memory cells.]  %%%%%

% FOR cancer(a):
%   return 0.004951485699757563;  // std dev = 0.363, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */


% Clauses:

! => 
   cancer(_, 0.004951485699757563). // Clause #1.


% The flattened versions of these clauses:

flattened_! => 
   cancer(Underscore, 0.004951485699757563). // Flattened version of clause #1.


% The unique flattened literals:


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%  Final call for computing score for cancer.  %%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

stepLength_tree1(1.0).
stepLength_tree2(1.0).
stepLength_tree3(1.0).
stepLength_tree4(1.0).
stepLength_tree5(1.0).
stepLength_tree6(1.0).
stepLength_tree7(1.0).
stepLength_tree8(1.0).
stepLength_tree9(1.0).
stepLength_tree10(1.0).
stepLength_tree11(1.0).
stepLength_tree12(1.0).
stepLength_tree13(1.0).
stepLength_tree14(1.0).
stepLength_tree15(1.0).
stepLength_tree16(1.0).
stepLength_tree17(1.0).
stepLength_tree18(1.0).
stepLength_tree19(1.0).
stepLength_tree20(1.0).

cancer(a, total) :- // A general accessor. 
   cancer(a, 1000000, total), !.
cancer(a, total) :- waitHere("This should not fail", cancer(a, total)).

cancer(a, treesToUse, total) :- // A tree-limited accessor (e.g., for tuning the number of trees to use).
   getScore_cancer_tree1(a, treesToUse, total1),
   getScore_cancer_tree2(a, treesToUse, total2),
   getScore_cancer_tree3(a, treesToUse, total3),
   getScore_cancer_tree4(a, treesToUse, total4),
   getScore_cancer_tree5(a, treesToUse, total5),
   getScore_cancer_tree6(a, treesToUse, total6),
   getScore_cancer_tree7(a, treesToUse, total7),
   getScore_cancer_tree8(a, treesToUse, total8),
   getScore_cancer_tree9(a, treesToUse, total9),
   getScore_cancer_tree10(a, treesToUse, total10),
   getScore_cancer_tree11(a, treesToUse, total11),
   getScore_cancer_tree12(a, treesToUse, total12),
   getScore_cancer_tree13(a, treesToUse, total13),
   getScore_cancer_tree14(a, treesToUse, total14),
   getScore_cancer_tree15(a, treesToUse, total15),
   getScore_cancer_tree16(a, treesToUse, total16),
   getScore_cancer_tree17(a, treesToUse, total17),
   getScore_cancer_tree18(a, treesToUse, total18),
   getScore_cancer_tree19(a, treesToUse, total19),
   getScore_cancer_tree20(a, treesToUse, total20),
   total is total1 + total2 + total3 + total4 + total5 + total6 + total7 + total8 + total9 + total10 + total11 + total12 + total13 + total14 + total15 + total16 + total17 + total18 + total19 + total20,
   !.
cancer(a, treesToUse, total) :- waitHere("This should not fail", cancer(a, treesToUse, total)).

getScore_cancer_tree1(a, treesToUse, 0.0) :- 1 > treesToUse, !.
getScore_cancer_tree1(a, treesToUse, total1) :- cancer_tree1(a, total), stepLength_tree1(stepLen), total1 is total * stepLen.

getScore_cancer_tree2(a, treesToUse, 0.0) :- 2 > treesToUse, !.
getScore_cancer_tree2(a, treesToUse, total2) :- cancer_tree2(a, total), stepLength_tree2(stepLen), total2 is total * stepLen.

getScore_cancer_tree3(a, treesToUse, 0.0) :- 3 > treesToUse, !.
getScore_cancer_tree3(a, treesToUse, total3) :- cancer_tree3(a, total), stepLength_tree3(stepLen), total3 is total * stepLen.

getScore_cancer_tree4(a, treesToUse, 0.0) :- 4 > treesToUse, !.
getScore_cancer_tree4(a, treesToUse, total4) :- cancer_tree4(a, total), stepLength_tree4(stepLen), total4 is total * stepLen.

getScore_cancer_tree5(a, treesToUse, 0.0) :- 5 > treesToUse, !.
getScore_cancer_tree5(a, treesToUse, total5) :- cancer_tree5(a, total), stepLength_tree5(stepLen), total5 is total * stepLen.

getScore_cancer_tree6(a, treesToUse, 0.0) :- 6 > treesToUse, !.
getScore_cancer_tree6(a, treesToUse, total6) :- cancer_tree6(a, total), stepLength_tree6(stepLen), total6 is total * stepLen.

getScore_cancer_tree7(a, treesToUse, 0.0) :- 7 > treesToUse, !.
getScore_cancer_tree7(a, treesToUse, total7) :- cancer_tree7(a, total), stepLength_tree7(stepLen), total7 is total * stepLen.

getScore_cancer_tree8(a, treesToUse, 0.0) :- 8 > treesToUse, !.
getScore_cancer_tree8(a, treesToUse, total8) :- cancer_tree8(a, total), stepLength_tree8(stepLen), total8 is total * stepLen.

getScore_cancer_tree9(a, treesToUse, 0.0) :- 9 > treesToUse, !.
getScore_cancer_tree9(a, treesToUse, total9) :- cancer_tree9(a, total), stepLength_tree9(stepLen), total9 is total * stepLen.

getScore_cancer_tree10(a, treesToUse, 0.0) :- 10 > treesToUse, !.
getScore_cancer_tree10(a, treesToUse, total10) :- cancer_tree10(a, total), stepLength_tree10(stepLen), total10 is total * stepLen.

getScore_cancer_tree11(a, treesToUse, 0.0) :- 11 > treesToUse, !.
getScore_cancer_tree11(a, treesToUse, total11) :- cancer_tree11(a, total), stepLength_tree11(stepLen), total11 is total * stepLen.

getScore_cancer_tree12(a, treesToUse, 0.0) :- 12 > treesToUse, !.
getScore_cancer_tree12(a, treesToUse, total12) :- cancer_tree12(a, total), stepLength_tree12(stepLen), total12 is total * stepLen.

getScore_cancer_tree13(a, treesToUse, 0.0) :- 13 > treesToUse, !.
getScore_cancer_tree13(a, treesToUse, total13) :- cancer_tree13(a, total), stepLength_tree13(stepLen), total13 is total * stepLen.

getScore_cancer_tree14(a, treesToUse, 0.0) :- 14 > treesToUse, !.
getScore_cancer_tree14(a, treesToUse, total14) :- cancer_tree14(a, total), stepLength_tree14(stepLen), total14 is total * stepLen.

getScore_cancer_tree15(a, treesToUse, 0.0) :- 15 > treesToUse, !.
getScore_cancer_tree15(a, treesToUse, total15) :- cancer_tree15(a, total), stepLength_tree15(stepLen), total15 is total * stepLen.

getScore_cancer_tree16(a, treesToUse, 0.0) :- 16 > treesToUse, !.
getScore_cancer_tree16(a, treesToUse, total16) :- cancer_tree16(a, total), stepLength_tree16(stepLen), total16 is total * stepLen.

getScore_cancer_tree17(a, treesToUse, 0.0) :- 17 > treesToUse, !.
getScore_cancer_tree17(a, treesToUse, total17) :- cancer_tree17(a, total), stepLength_tree17(stepLen), total17 is total * stepLen.

getScore_cancer_tree18(a, treesToUse, 0.0) :- 18 > treesToUse, !.
getScore_cancer_tree18(a, treesToUse, total18) :- cancer_tree18(a, total), stepLength_tree18(stepLen), total18 is total * stepLen.

getScore_cancer_tree19(a, treesToUse, 0.0) :- 19 > treesToUse, !.
getScore_cancer_tree19(a, treesToUse, total19) :- cancer_tree19(a, total), stepLength_tree19(stepLen), total19 is total * stepLen.

getScore_cancer_tree20(a, treesToUse, 0.0) :- 20 > treesToUse, !.
getScore_cancer_tree20(a, treesToUse, total20) :- cancer_tree20(a, total), stepLength_tree20(stepLen), total20 is total * stepLen.

flattenedLiteralsInThisSetOfTrees(cancer, 2, [
   smokes(A),
   num_of_smoking_friends(A, 2)]).
